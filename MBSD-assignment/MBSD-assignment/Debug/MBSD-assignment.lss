
MBSD-assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000719  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000661  00000000  00000000  00000971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027f  00000000  00000000  00000fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  80:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <GetKeyPressed>:
	}
}
int GetKeyPressed(void)
{
	char x;
	PORTB=0x00;
  88:	18 ba       	out	0x18, r1	; 24
	int data;
	x=PINC;
  8a:	83 b3       	in	r24, 0x13	; 19
	if(x==0x01)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f4       	brne	.+8      	; 0x98 <GetKeyPressed+0x10>
	{
		data=(PIND&0x0F);
  90:	80 b3       	in	r24, 0x10	; 16
  92:	8f 70       	andi	r24, 0x0F	; 15
  94:	90 e0       	ldi	r25, 0x00	; 0
		return data;
  96:	08 95       	ret
	}
	return 16;
  98:	80 e1       	ldi	r24, 0x10	; 16
  9a:	90 e0       	ldi	r25, 0x00	; 0
}
  9c:	08 95       	ret

0000009e <main>:
#define F_CPU 1000000UL
#include<util/delay.h>

int GetKeyPressed(void);
int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	68 97       	sbiw	r28, 0x18	; 24
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
	char digit[20]={'7','8','9','A','4','5','6','B','1','2','3','C','*','0','#','D','\0'};
  b2:	fe 01       	movw	r30, r28
  b4:	31 96       	adiw	r30, 0x01	; 1
  b6:	84 e1       	ldi	r24, 0x14	; 20
  b8:	df 01       	movw	r26, r30
  ba:	1d 92       	st	X+, r1
  bc:	8a 95       	dec	r24
  be:	e9 f7       	brne	.-6      	; 0xba <main+0x1c>
  c0:	87 e3       	ldi	r24, 0x37	; 55
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	88 e3       	ldi	r24, 0x38	; 56
  c6:	8a 83       	std	Y+2, r24	; 0x02
  c8:	89 e3       	ldi	r24, 0x39	; 57
  ca:	8b 83       	std	Y+3, r24	; 0x03
  cc:	81 e4       	ldi	r24, 0x41	; 65
  ce:	8c 83       	std	Y+4, r24	; 0x04
  d0:	84 e3       	ldi	r24, 0x34	; 52
  d2:	8d 83       	std	Y+5, r24	; 0x05
  d4:	95 e3       	ldi	r25, 0x35	; 53
  d6:	9e 83       	std	Y+6, r25	; 0x06
  d8:	96 e3       	ldi	r25, 0x36	; 54
  da:	9f 83       	std	Y+7, r25	; 0x07
  dc:	92 e4       	ldi	r25, 0x42	; 66
  de:	98 87       	std	Y+8, r25	; 0x08
  e0:	31 e3       	ldi	r19, 0x31	; 49
  e2:	39 87       	std	Y+9, r19	; 0x09
  e4:	22 e3       	ldi	r18, 0x32	; 50
  e6:	2a 87       	std	Y+10, r18	; 0x0a
  e8:	93 e3       	ldi	r25, 0x33	; 51
  ea:	9b 87       	std	Y+11, r25	; 0x0b
  ec:	43 e4       	ldi	r20, 0x43	; 67
  ee:	4c 87       	std	Y+12, r20	; 0x0c
  f0:	4a e2       	ldi	r20, 0x2A	; 42
  f2:	4d 87       	std	Y+13, r20	; 0x0d
  f4:	40 e3       	ldi	r20, 0x30	; 48
  f6:	4e 87       	std	Y+14, r20	; 0x0e
  f8:	43 e2       	ldi	r20, 0x23	; 35
  fa:	4f 87       	std	Y+15, r20	; 0x0f
  fc:	44 e4       	ldi	r20, 0x44	; 68
  fe:	48 8b       	std	Y+16, r20	; 0x10
	DDRD=0xF0;
 100:	40 ef       	ldi	r20, 0xF0	; 240
 102:	41 bb       	out	0x11, r20	; 17
	DDRA=0xFF;
 104:	4f ef       	ldi	r20, 0xFF	; 255
 106:	4a bb       	out	0x1a, r20	; 26
	DDRC=0x00;
 108:	14 ba       	out	0x14, r1	; 20
	DDRB=(1<<PINB1);
 10a:	42 e0       	ldi	r20, 0x02	; 2
 10c:	47 bb       	out	0x17, r20	; 23
	int key;
	char password[4]={'1','2','3','4'};
 10e:	3d 8b       	std	Y+21, r19	; 0x15
 110:	2e 8b       	std	Y+22, r18	; 0x16
 112:	9f 8b       	std	Y+23, r25	; 0x17
 114:	88 8f       	std	Y+24, r24	; 0x18
	int index=0;
	char open=0b11000000;
	char close=0b11000110;
	PORTA=0b11000110;
 116:	86 ec       	ldi	r24, 0xC6	; 198
 118:	8b bb       	out	0x1b, r24	; 27
	DDRA=0xFF;
	DDRC=0x00;
	DDRB=(1<<PINB1);
	int key;
	char password[4]={'1','2','3','4'};
	int index=0;
 11a:	00 e0       	ldi	r16, 0x00	; 0
 11c:	10 e0       	ldi	r17, 0x00	; 0
	char close=0b11000110;
	PORTA=0b11000110;
	while(1)
	{
		//TODO:: Please write your application code
		key= GetKeyPressed();
 11e:	0e 94 44 00 	call	0x88	; 0x88 <GetKeyPressed>
		if(key !=16)
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	c9 f0       	breq	.+50     	; 0x15a <main+0xbc>
		{
			if (digit[key]==password[index]){
 128:	e1 e0       	ldi	r30, 0x01	; 1
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	e8 0f       	add	r30, r24
 132:	f9 1f       	adc	r31, r25
 134:	80 81       	ld	r24, Z
 136:	e5 e1       	ldi	r30, 0x15	; 21
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ec 0f       	add	r30, r28
 13c:	fd 1f       	adc	r31, r29
 13e:	e0 0f       	add	r30, r16
 140:	f1 1f       	adc	r31, r17
 142:	90 81       	ld	r25, Z
 144:	89 13       	cpse	r24, r25
 146:	03 c0       	rjmp	.+6      	; 0x14e <main+0xb0>
				index++;
 148:	0f 5f       	subi	r16, 0xFF	; 255
 14a:	1f 4f       	sbci	r17, 0xFF	; 255
 14c:	06 c0       	rjmp	.+12     	; 0x15a <main+0xbc>
			}
			else if(digit[key]=='0'){
 14e:	80 33       	cpi	r24, 0x30	; 48
 150:	21 f4       	brne	.+8      	; 0x15a <main+0xbc>
				index=0;
				PORTA=close;
 152:	86 ec       	ldi	r24, 0xC6	; 198
 154:	8b bb       	out	0x1b, r24	; 27
		{
			if (digit[key]==password[index]){
				index++;
			}
			else if(digit[key]=='0'){
				index=0;
 156:	00 e0       	ldi	r16, 0x00	; 0
 158:	10 e0       	ldi	r17, 0x00	; 0
				PORTA=close;
			}
		}
		if (index==4){
 15a:	04 30       	cpi	r16, 0x04	; 4
 15c:	11 05       	cpc	r17, r1
 15e:	19 f4       	brne	.+6      	; 0x166 <main+0xc8>
			PORTA=open;
 160:	80 ec       	ldi	r24, 0xC0	; 192
 162:	8b bb       	out	0x1b, r24	; 27
 164:	dc cf       	rjmp	.-72     	; 0x11e <main+0x80>
		}
		else{
			PORTA=close;
 166:	86 ec       	ldi	r24, 0xC6	; 198
 168:	8b bb       	out	0x1b, r24	; 27
 16a:	d9 cf       	rjmp	.-78     	; 0x11e <main+0x80>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
