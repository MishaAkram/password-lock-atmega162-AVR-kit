
MBSD-assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085e  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000734  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ab  00000000  00000000  000012c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00001674  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f8  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020a  00000000  00000000  00001acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  60:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  64:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  68:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  6c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 6d 00 	call	0xda	; 0xda <main>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <GetKeyPressed>:
	}
}
int GetKeyPressed(void)
{
	char x;
	PORTB=0x00;
  88:	18 ba       	out	0x18, r1	; 24
	int data;
	x=PINC;
  8a:	83 b3       	in	r24, 0x13	; 19
	if(x==0x01)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f4       	brne	.+8      	; 0x98 <GetKeyPressed+0x10>
	{
		data=(PIND&0x0F);
  90:	80 b3       	in	r24, 0x10	; 16
  92:	8f 70       	andi	r24, 0x0F	; 15
  94:	90 e0       	ldi	r25, 0x00	; 0
		return data;
  96:	08 95       	ret
	}
	return 16;
  98:	80 e1       	ldi	r24, 0x10	; 16
  9a:	90 e0       	ldi	r25, 0x00	; 0
}
  9c:	08 95       	ret

0000009e <checkPassword>:

//function to compare array elements
int checkPassword(char a[],char b[],int size)	{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	ec 01       	movw	r28, r24
  a4:	da 01       	movw	r26, r20
	int i;
	for(i=0;i<size;i++){
  a6:	20 e0       	ldi	r18, 0x00	; 0
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	0c c0       	rjmp	.+24     	; 0xc4 <checkPassword+0x26>
		if(a[i]!=b[i])
  ac:	fe 01       	movw	r30, r28
  ae:	e2 0f       	add	r30, r18
  b0:	f3 1f       	adc	r31, r19
  b2:	50 81       	ld	r21, Z
  b4:	fb 01       	movw	r30, r22
  b6:	e2 0f       	add	r30, r18
  b8:	f3 1f       	adc	r31, r19
  ba:	90 81       	ld	r25, Z
  bc:	59 13       	cpse	r21, r25
  be:	08 c0       	rjmp	.+16     	; 0xd0 <checkPassword+0x32>
}

//function to compare array elements
int checkPassword(char a[],char b[],int size)	{
	int i;
	for(i=0;i<size;i++){
  c0:	2f 5f       	subi	r18, 0xFF	; 255
  c2:	3f 4f       	sbci	r19, 0xFF	; 255
  c4:	2a 17       	cp	r18, r26
  c6:	3b 07       	cpc	r19, r27
  c8:	8c f3       	brlt	.-30     	; 0xac <checkPassword+0xe>
		if(a[i]!=b[i])
		return 1;
	}
	return 0;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <checkPassword+0x36>
//function to compare array elements
int checkPassword(char a[],char b[],int size)	{
	int i;
	for(i=0;i<size;i++){
		if(a[i]!=b[i])
		return 1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 0;
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <main>:
#include <stdio.h>
#include <util/delay.h>
int GetKeyPressed(void);
int checkPassword(char a[],char b[],int size);
int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	6c 97       	sbiw	r28, 0x1c	; 28
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	char digit[20]={'7','8','9','A','4','5','6','B','1','2','3','C','*','0','#','D','\0'};
  ee:	fe 01       	movw	r30, r28
  f0:	31 96       	adiw	r30, 0x01	; 1
  f2:	84 e1       	ldi	r24, 0x14	; 20
  f4:	df 01       	movw	r26, r30
  f6:	1d 92       	st	X+, r1
  f8:	8a 95       	dec	r24
  fa:	e9 f7       	brne	.-6      	; 0xf6 <main+0x1c>
  fc:	87 e3       	ldi	r24, 0x37	; 55
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	88 e3       	ldi	r24, 0x38	; 56
 102:	8a 83       	std	Y+2, r24	; 0x02
 104:	89 e3       	ldi	r24, 0x39	; 57
 106:	8b 83       	std	Y+3, r24	; 0x03
 108:	81 e4       	ldi	r24, 0x41	; 65
 10a:	8c 83       	std	Y+4, r24	; 0x04
 10c:	84 e3       	ldi	r24, 0x34	; 52
 10e:	8d 83       	std	Y+5, r24	; 0x05
 110:	95 e3       	ldi	r25, 0x35	; 53
 112:	9e 83       	std	Y+6, r25	; 0x06
 114:	96 e3       	ldi	r25, 0x36	; 54
 116:	9f 83       	std	Y+7, r25	; 0x07
 118:	92 e4       	ldi	r25, 0x42	; 66
 11a:	98 87       	std	Y+8, r25	; 0x08
 11c:	31 e3       	ldi	r19, 0x31	; 49
 11e:	39 87       	std	Y+9, r19	; 0x09
 120:	22 e3       	ldi	r18, 0x32	; 50
 122:	2a 87       	std	Y+10, r18	; 0x0a
 124:	93 e3       	ldi	r25, 0x33	; 51
 126:	9b 87       	std	Y+11, r25	; 0x0b
 128:	43 e4       	ldi	r20, 0x43	; 67
 12a:	4c 87       	std	Y+12, r20	; 0x0c
 12c:	4a e2       	ldi	r20, 0x2A	; 42
 12e:	4d 87       	std	Y+13, r20	; 0x0d
 130:	40 e3       	ldi	r20, 0x30	; 48
 132:	4e 87       	std	Y+14, r20	; 0x0e
 134:	43 e2       	ldi	r20, 0x23	; 35
 136:	4f 87       	std	Y+15, r20	; 0x0f
 138:	44 e4       	ldi	r20, 0x44	; 68
 13a:	48 8b       	std	Y+16, r20	; 0x10
	DDRD=0xF0;
 13c:	40 ef       	ldi	r20, 0xF0	; 240
 13e:	41 bb       	out	0x11, r20	; 17
	DDRA=0xFF;
 140:	5f ef       	ldi	r21, 0xFF	; 255
 142:	5a bb       	out	0x1a, r21	; 26
	DDRC=0xF0;
 144:	44 bb       	out	0x14, r20	; 20
	DDRB=(1<<PINB1);
 146:	42 e0       	ldi	r20, 0x02	; 2
 148:	47 bb       	out	0x17, r20	; 23
	int key;
	char password[4]={'1','2','3','4'};
 14a:	3d 8b       	std	Y+21, r19	; 0x15
 14c:	2e 8b       	std	Y+22, r18	; 0x16
 14e:	9f 8b       	std	Y+23, r25	; 0x17
 150:	88 8f       	std	Y+24, r24	; 0x18
	char check[4];
	int invalid=0;
	int index=0;
	char open=0b11000000;
	char close=0b11000110;
	PORTA=0b11000110;
 152:	86 ec       	ldi	r24, 0xC6	; 198
 154:	8b bb       	out	0x1b, r24	; 27
	DDRB=(1<<PINB1);
	int key;
	char password[4]={'1','2','3','4'};
	char check[4];
	int invalid=0;
	int index=0;
 156:	00 e0       	ldi	r16, 0x00	; 0
 158:	10 e0       	ldi	r17, 0x00	; 0
	DDRC=0xF0;
	DDRB=(1<<PINB1);
	int key;
	char password[4]={'1','2','3','4'};
	char check[4];
	int invalid=0;
 15a:	e1 2c       	mov	r14, r1
 15c:	f1 2c       	mov	r15, r1
	char invalid_close=0b00000000;
	
	while(1)
	{
		//TODO:: Please write your application code
		key= GetKeyPressed();
 15e:	0e 94 44 00 	call	0x88	; 0x88 <GetKeyPressed>
		// any key is pressed
		if(key !=16)
 162:	80 31       	cpi	r24, 0x10	; 16
 164:	91 05       	cpc	r25, r1
 166:	09 f4       	brne	.+2      	; 0x16a <main+0x90>
 168:	42 c0       	rjmp	.+132    	; 0x1ee <main+0x114>
		{ //password key is correct and it matches
			if (digit[key]==password[index] && index!=4){
 16a:	e1 e0       	ldi	r30, 0x01	; 1
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ec 0f       	add	r30, r28
 170:	fd 1f       	adc	r31, r29
 172:	e8 0f       	add	r30, r24
 174:	f9 1f       	adc	r31, r25
 176:	80 81       	ld	r24, Z
 178:	e5 e1       	ldi	r30, 0x15	; 21
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ec 0f       	add	r30, r28
 17e:	fd 1f       	adc	r31, r29
 180:	e0 0f       	add	r30, r16
 182:	f1 1f       	adc	r31, r17
 184:	90 81       	ld	r25, Z
 186:	89 13       	cpse	r24, r25
 188:	0d c0       	rjmp	.+26     	; 0x1a4 <main+0xca>
 18a:	04 30       	cpi	r16, 0x04	; 4
 18c:	11 05       	cpc	r17, r1
 18e:	51 f0       	breq	.+20     	; 0x1a4 <main+0xca>
				check[index]=password[index];
 190:	e9 e1       	ldi	r30, 0x19	; 25
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ec 0f       	add	r30, r28
 196:	fd 1f       	adc	r31, r29
 198:	e0 0f       	add	r30, r16
 19a:	f1 1f       	adc	r31, r17
 19c:	90 83       	st	Z, r25
				index++;
 19e:	0f 5f       	subi	r16, 0xFF	; 255
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
 1a2:	25 c0       	rjmp	.+74     	; 0x1ee <main+0x114>
			}
			//reset button
			else if(digit[key]=='0'){
 1a4:	80 33       	cpi	r24, 0x30	; 48
 1a6:	09 f1       	breq	.+66     	; 0x1ea <main+0x110>
				index=0;
			}
			else if(digit[key]=='#'){
 1a8:	83 32       	cpi	r24, 0x23	; 35
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <main+0xda>
				index--;
 1ac:	01 50       	subi	r16, 0x01	; 1
 1ae:	11 09       	sbc	r17, r1
				PORTA=0b00000000;
 1b0:	1b ba       	out	0x1b, r1	; 27
 1b2:	1d c0       	rjmp	.+58     	; 0x1ee <main+0x114>
			}
			//incorrect input is entered
			else if (digit[key]!=password[index-1] && index!=4){
 1b4:	f8 01       	movw	r30, r16
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	25 e1       	ldi	r18, 0x15	; 21
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	2c 0f       	add	r18, r28
 1be:	3d 1f       	adc	r19, r29
 1c0:	e2 0f       	add	r30, r18
 1c2:	f3 1f       	adc	r31, r19
 1c4:	90 81       	ld	r25, Z
 1c6:	89 17       	cp	r24, r25
 1c8:	91 f0       	breq	.+36     	; 0x1ee <main+0x114>
 1ca:	04 30       	cpi	r16, 0x04	; 4
 1cc:	11 05       	cpc	r17, r1
 1ce:	79 f0       	breq	.+30     	; 0x1ee <main+0x114>
				index=0;
				memset(check,0,4);
 1d0:	fe 01       	movw	r30, r28
 1d2:	79 96       	adiw	r30, 0x19	; 25
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	df 01       	movw	r26, r30
 1d8:	1d 92       	st	X+, r1
 1da:	8a 95       	dec	r24
 1dc:	e9 f7       	brne	.-6      	; 0x1d8 <main+0xfe>
				invalid++;
 1de:	bf ef       	ldi	r27, 0xFF	; 255
 1e0:	eb 1a       	sub	r14, r27
 1e2:	fb 0a       	sbc	r15, r27
				index--;
				PORTA=0b00000000;
			}
			//incorrect input is entered
			else if (digit[key]!=password[index-1] && index!=4){
				index=0;
 1e4:	00 e0       	ldi	r16, 0x00	; 0
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <main+0x114>
				check[index]=password[index];
				index++;
			}
			//reset button
			else if(digit[key]=='0'){
				index=0;
 1ea:	00 e0       	ldi	r16, 0x00	; 0
 1ec:	10 e0       	ldi	r17, 0x00	; 0
				index=0;
				memset(check,0,4);
				invalid++;
			}
		}
		if (index==4 && checkPassword(password,check,4)==0){
 1ee:	04 30       	cpi	r16, 0x04	; 4
 1f0:	11 05       	cpc	r17, r1
 1f2:	79 f4       	brne	.+30     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 1f4:	44 e0       	ldi	r20, 0x04	; 4
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	be 01       	movw	r22, r28
 1fa:	67 5e       	subi	r22, 0xE7	; 231
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	ce 01       	movw	r24, r28
 200:	45 96       	adiw	r24, 0x15	; 21
 202:	0e 94 4f 00 	call	0x9e	; 0x9e <checkPassword>
 206:	89 2b       	or	r24, r25
 208:	21 f4       	brne	.+8      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
			PORTA=open;
 20a:	80 ec       	ldi	r24, 0xC0	; 192
 20c:	8b bb       	out	0x1b, r24	; 27
			invalid=0;
 20e:	e1 2c       	mov	r14, r1
 210:	f1 2c       	mov	r15, r1
		}
		
		if (invalid==4){
 212:	24 e0       	ldi	r18, 0x04	; 4
 214:	e2 16       	cp	r14, r18
 216:	f1 04       	cpc	r15, r1
 218:	79 f4       	brne	.+30     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
			PORTC=invalid_open;
 21a:	81 e8       	ldi	r24, 0x81	; 129
 21c:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	3f e3       	ldi	r19, 0x3F	; 63
 220:	82 e4       	ldi	r24, 0x42	; 66
 222:	9f e0       	ldi	r25, 0x0F	; 15
 224:	31 50       	subi	r19, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 22e:	00 00       	nop
			_delay_ms(5000);
			PORTC=invalid_close;
 230:	15 ba       	out	0x15, r1	; 21
			invalid=0;
 232:	e1 2c       	mov	r14, r1
 234:	f1 2c       	mov	r15, r1
 236:	93 cf       	rjmp	.-218    	; 0x15e <main+0x84>
		}
		else{
			PORTA=close;
 238:	86 ec       	ldi	r24, 0xC6	; 198
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	90 cf       	rjmp	.-224    	; 0x15e <main+0x84>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
